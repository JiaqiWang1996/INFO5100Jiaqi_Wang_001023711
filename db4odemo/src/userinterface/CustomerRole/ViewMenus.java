/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import userinterface.RestaurantAdminRole.*;
import userinterface.SystemAdminWorkArea.*;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Restaurant.MenuItem;
import Business.Restaurant.Order;
import Business.Restaurant.OrderItem;
import Business.Restaurant.Restaurant;
import Business.Role.AdminRole;
import Business.Role.CustomerRole;
import Business.Role.Role;
import Business.Role.Role.RoleType;
import static Business.Role.Role.RoleType.RestaurantAdmin;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author wang
 */
public class ViewMenus extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount account;
    Restaurant res;
    Order cart;
    private List<OrderItem> items=new ArrayList<OrderItem>();
    
    /**
     * Creates new form CustomerManagementScreen
     */
    public ViewMenus(JPanel userProcessContainer,EcoSystem ecosystem,String cusName,String resName) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ecosystem=ecosystem;
//        btnView.setVisible(false);
        this.account=this.ecosystem.getUserAccountDirectory().searchUserAccount(cusName);
        this.res=this.ecosystem.getRestaurantDirectory().searchRestaurantByName(resName);
        if(res!=null)
            this.populate();
        else
            JOptionPane.showMessageDialog(null, "System error occurred! Please log out!");
        
        TableColumnModel tcm = tabMenu.getColumnModel();
       
    }
public void populate()
    {
        DefaultTableModel dtm = (DefaultTableModel) tabMenu.getModel();
        dtm.setRowCount(0);
        for (MenuItem i:this.res.getMenus()) {
            
                Object row[] = new Object[2];
                row[0] = i;
                row[1] = i.getPrice();
                //row[2] = new JCheckBox();
                dtm.addRow(row);
            }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        btnAddtoCart = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabMenu = new javax.swing.JTable();
        lblPrice = new javax.swing.JLabel();
        btnDelete1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabMenu1 = new javax.swing.JTable();
        btnOrder = new javax.swing.JButton();
        QuantitySpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel7.setText("Menu page");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 10, 112, 32));

        btnAddtoCart.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btnAddtoCart.setText("Add to cart");
        btnAddtoCart.setToolTipText("");
        btnAddtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddtoCartActionPerformed(evt);
            }
        });
        add(btnAddtoCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, -1, -1));

        btnDelete.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btnDelete.setText("Remove the selected menu");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, -1, -1));

        btnView.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btnView.setText("View menu details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, -1, -1));

        btnBack.setFont(new java.awt.Font("宋体", 3, 18)); // NOI18N
        btnBack.setText("<back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 84, -1));

        tabMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabMenu);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 48, 510, 96));

        lblPrice.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblPrice.setText("Calculated price: ");
        add(lblPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, -1, 32));

        btnDelete1.setFont(new java.awt.Font("宋体", 3, 14)); // NOI18N
        btnDelete1.setText("Remove from cart");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });
        add(btnDelete1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, -1, -1));

        tabMenu1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderNumber", "Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabMenu1MouseClicked(evt);
            }
        });
        tabMenu1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabMenu1KeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tabMenu1);
        if (tabMenu1.getColumnModel().getColumnCount() > 0) {
            tabMenu1.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 510, 97));

        btnOrder.setFont(new java.awt.Font("宋体", 3, 14)); // NOI18N
        btnOrder.setText("Place order");
        btnOrder.setToolTipText("");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });
        add(btnOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, -1, -1));
        add(QuantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel1.setText("Quantity:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 240, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddtoCartActionPerformed
        // TODO add your handling code here:
         int selectedRow = tabMenu.getSelectedRow();
     int Q=(Integer)QuantitySpinner.getValue();
        if (selectedRow >= 0&&Q>0) {
            MenuItem item=(MenuItem)tabMenu.getValueAt(selectedRow, 0);
            
             OrderItem item1=new OrderItem(item,Q);
            items.add(item1);
            
         cart=new Order(account.getUsername(), res.getRestaurantName(), items, item1.getOrderitemNumber());
           
        populateOrdertable();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row,you haven't selected any row");
        }
        
       
    }//GEN-LAST:event_btnAddtoCartActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabMenu.getSelectedRow();

        if (selectedRow >= 0) {
            MenuItem item = (MenuItem) tabMenu.getValueAt(selectedRow,0);
            if(this.res.getMenus().contains(item))
            {
                this.res.getMenus().remove(item);
                JOptionPane.showMessageDialog(null, "Menu item deleted.");
                this.populate();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Menu item not exist");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabMenu.getSelectedRow();

        if (selectedRow >= 0) {
            MenuItem item=(MenuItem)tabMenu.getValueAt(selectedRow, 0);
            ViewMenu view=new ViewMenu(this.userProcessContainer,this.ecosystem,this.res.getRestaurantName(),item);
            this.userProcessContainer.add("ViewMenu",view);
            CardLayout layout=(CardLayout)this.userProcessContainer.getLayout();
            layout.show(this.userProcessContainer, "ViewMenu");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row,you haven't selected any row");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout=(CardLayout)this.userProcessContainer.getLayout();
        this.userProcessContainer.remove(this);
        layout.show(userProcessContainer, "userMain");
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabMenu1.getSelectedRow();

        if (selectedRow >= 0) {
            OrderItem item = (OrderItem) tabMenu1.getValueAt(selectedRow,1);
            if(items.contains(item))
            {
                items.remove(item);
                JOptionPane.showMessageDialog(null, "Item deleted.");
                this.populateOrdertable();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Item not exist");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.");
        }
       
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void tabMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabMenu1MouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tabMenu1MouseClicked

    private void tabMenu1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabMenu1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tabMenu1KeyTyped

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        // TODO add your handling code here:
        res.addOrder(cart);
        this.ecosystem.getRestaurantDirectory().getRestaurantList().add(res);
      
//       MenuItem item=new MenuItem();
//       item.setDishName("dish1");
//       item.setPrice(10);
//       OrderItem item1=new OrderItem(item, 1);
//        Order cart1=new Order("cus1", "res1");
//       cart1.addOrderItem(item1);
//        res.addOrder(cart1);
       

        //Display order detail and delivery info
        JOptionPane.showMessageDialog(null, "The restaurant has already received your order. Wait for just a minute...");
        ViewOrders view=new ViewOrders(this.userProcessContainer,this.ecosystem,this.res.getRestaurantName(),this.account.getUsername());
        this.userProcessContainer.remove(this);
        this.userProcessContainer.add("ViewOrders",view);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.show(this.userProcessContainer, "ViewOrders");
    }//GEN-LAST:event_btnOrderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner QuantitySpinner;
    private javax.swing.JButton btnAddtoCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JTable tabMenu;
    private javax.swing.JTable tabMenu1;
    // End of variables declaration//GEN-END:variables

    private void populateOrdertable() {
       //To change body of generated methods, choose Tools | Templates.
        double totalPrice=0;
        DefaultTableModel dtm = (DefaultTableModel) tabMenu1.getModel();
        dtm.setRowCount(0);
        for (OrderItem i:items) {          
                Object row[] = new Object[4];
                row[0]=i.getOrderitemNumber();
                row[1] = i;
                row[2] = i.getDishAndPrice().getPrice();
                row[3] = i.getNum();
                totalPrice+=i.getDishAndPrice().getPrice()*i.getNum();
                dtm.addRow(row);
            }
        this.lblPrice.setText("Total price: "+totalPrice);
    }
}
